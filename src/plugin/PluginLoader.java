package plugin;import java.io.*;/** * This is the method for loading each plugin into the program, it was based * of something i found on Google then heavily rewritten for the purpose we need it for. * @author Tom Rosier(XeTK) */public class PluginLoader extends ClassLoader {	/**	 * This converts a .class file to a loadable class and loads the object into	 * the program for it to be used at will.	 * @param filename the location of the plugin we want to load.	 * @return's the object that we would like to work on so a instance of the plugin.	 * @throws Exception as this is a complicated process it may throw any exception.	 */    public Object loadClassOBJ (String filename) throws Exception     {    	// If the file doesn't have .class as a ending then we discard is straight away.		if (filename.endsWith(".class"))		{			// Get the original class name from the path by breaking at the dot.	    	String classname = filename.substring(0,filename.indexOf('.'));	    		    	// Print out the class name so we can see what plugins have been found.	    	System.out.print(classname + ", ");	    		    	// Check if the class has already been loaded if it has then we don't need todo anything.	    	Class c = findLoadedClass(classname);		    	// So if it hasn't been loaded then we convert the file into bytes and load it.	        if (c == null) 	        {		        	// Convert the class from bytes into a object				File f = new File(filename);								int length = (int) f.length();				byte[] classbytes = new byte[length];				DataInputStream in = new DataInputStream(new FileInputStream(f));				in.readFully(classbytes);				in.close();								// Define them bytes into something we can actually use.				c = defineClass(classname, classbytes, 0, length);	        }	        	        // Resolve the class, don't know why doesn't work without it	        resolveClass(c);	        	        // Check the class has loaded correctly and has the correct number of functions.	        if (c.getInterfaces().length != 0)	        	return c.newInstance();		}		// And if we can't load we return null so there is a status to say if it hasnt loaded.        return null;    }}